apiVersion: apps/v1  # Define la versión de la API de Kubernetes que se está utilizando
kind: Deployment  # Indica que estamos creando un Deployment para gestionar Pods
metadata:
  name: flask-app-deployment  # Nombre del Deployment para identificarlo
  namespace: default  # Espacio de nombres donde se va a desplegar el Deployment (por defecto, "default")
  labels:
    app: flask-app  # Etiqueta que identifica esta aplicación como un servicio Flask
spec:
  replicas: 2  # Se especifican 2 réplicas de la aplicación para habilitar balanceo de carga
  selector:
    matchLabels:
      app: flask-app  # Selector que busca Pods con la etiqueta "app: flask-app" para gestionarlos
  template:
    metadata:
      labels:
        app: flask-app  # Etiqueta que se aplicará a los Pods creados por este Deployment
    spec:
      containers:
      - name: flask-app  # Nombre del contenedor que ejecutará la aplicación Flask
        image: python:3.9-slim  # Imagen Docker de Python 3.9 en su versión "slim" (más ligera)
        ports:
        - containerPort: 5000  # Puerto donde Flask estará escuchando (5000 es el puerto predeterminado de Flask)
        env:  # Variables de entorno que se pasarán al contenedor Flask
        - name: FLASK_ENV
          value: "production"  # Define que el entorno de Flask es "producción"
        - name: DATABASE_URL
          value: "mysql://root:my-secret-pw@mysql-service/mydatabase"  # URL de conexión a la base de datos MySQL que utiliza Flask
        command: ["flask"]  # Comando que se ejecuta para iniciar Flask dentro del contenedor
        args: ["run", "--host=0.0.0.0"]  # Argumentos que se pasan al comando para que Flask escuche en todas las interfaces (necesario en Kubernetes)
